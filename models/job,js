"use strict";

const db = require("../db");
const { BadRequestError, NotFoundError, ExpressError } = require("../expressError");
const { sqlForPartialUpdate } = require("../helpers/sql");


class Jobs {
    static async create({id, title,salary, equity, company_handle  }) {
        const duplicateCheck = await db.query(
            `SELECT id
                FROM jobs
                WHERE id=$1`,
            [id]);

        if (duplicateCheck.rows[0])
            throw new BadRequestError(` Duplicate Job: ${id}`)

        const result = await db.query(
            `INSERT INTO jobs
            (id, title,salary, equity,company_handle)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING id, title,salary, equity,company_handle AS "companyHandle"`,

            [id,
            title,
            salary,
            equity,
            company_handle
            ],
        ); 
        const jobs = result.rows[0]
    
        return jobs
    }


    static async findAll() {
        const result = await db.query(
            `SELECT id, 
                    title, 
                    salary,
                    equity,
                    company_handle AS "companyHandle"
            FROM jobs
            ORDER BY title`);
        return result.rows;
    }

    static async get(id) {
        const result =  await db.query(
            `SELECT id,
                    title, 
                    salary,
                    equity, 
                    company_handle AS "companyHandle
            FROM jobs
            WHERE id = $1`
        [id]);

        const job = result.rows[0]

        if (!job) throw new NotFoundError (`No Job ${job}`)

        return job;
    }

    static async update(id, data) {
        const { setCols, values } = sqlForPartialUpdate(
            data,
            {
                title: "title",
                salary: "salary",
                equity: "equity",
                companyHandle: "company_handle"
            }
        );
        const idVarIdx = "$" + (values.length + 1);

        const querySql = `UPDATE jobs
                            SET ${setCols}
                            WHERE id = ${idVarIdx}
                            RETURNING id, title, salary, equity, company_handle AS "companyHandle"`;
        const result = await db.query(querySql, [...values, id]);
        const job = result.rows[0];

        if (!job) throw new NotFoundError(`No job found with id: ${id}`);

        return job;
    }


    static async remove(id) {
        const result = await db.query(
            `DELETE
                    FROM jobs
                    WHERE id = $1
                    RETURNING id`, [id]);
        const job = result.rows[0]

        if (!job) throw new NotFoundError(`No Job: ${id}`)
    }
}


module.exports = Jobs;